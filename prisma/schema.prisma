// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(cuid())
  legalName String   @unique @map(name: "legal_name")
  user      User[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "organizations")
}

model User {
  id             Int           @id @default(autoincrement())
  uuid           String        @unique @default(cuid())
  fullName       String        @map(name: "full_name")
  email          String        @unique
  picture        String
  refreshToken   String        @unique @map(name: "refresh_token")
  event          Event[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?          @map("organization_id")
  createdAt      DateTime      @default(now()) @map(name: "created_at")
  updatedAt      DateTime      @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model EventType {
  id            Int      @id @default(autoincrement())
  uuid          String   @unique @default(cuid())
  name          String   @unique
  location      String
  description   String?
  eventLink     String   @map(name: "event_link")
  eventColor    String   @map(name: "event_color")
  eventDuration Int      @map(name: "event_duration")
  event         Event[]
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "event_types")
}

model Event {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(cuid())
  inviteeEmail  String    @map(name: "invitee_email")
  meetingLink   String    @map(name: "meeting_link")
  timeZone      String    @map(name: "time_zone")
  meetingStart  DateTime  @map(name: "meeting_start")
  meetingFinish DateTime  @map(name: "meeting_finish")
  user          User      @relation(fields: [userId], references: [id])
  userId        Int       @map("user_id")
  invitee       Invitee   @relation(fields: [inviteeId], references: [id])
  inviteeId     Int       @map("invitee_id")
  eventType     EventType @relation(fields: [eventTypeId], references: [id])
  eventTypeId   Int       @map("event_type_id")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "events")
}

model Invitee {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(cuid())
  email     String   @unique
  event     Event[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "invitees")
}

model Blacklist {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(cuid())
  hash      String    @unique
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")

  @@map(name: "blacklists")
}
